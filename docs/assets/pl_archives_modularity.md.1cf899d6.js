import{_ as o,c as e,o as a,d as n}from"./app.8706ebaa.js";const y=JSON.parse('{"title":"Modularne podej\u015Bcie do tworzenia projekt\xF3w","description":"","frontmatter":{},"headers":[],"relativePath":"pl/archives/modularity.md"}'),t={name:"pl/archives/modularity.md"},r=n('<h1 id="modularne-podejscie-do-tworzenia-projektow" tabindex="-1">Modularne podej\u015Bcie do tworzenia projekt\xF3w <a class="header-anchor" href="#modularne-podejscie-do-tworzenia-projektow" aria-hidden="true">#</a></h1><p>Wszystkie projekty tworzymy w oparciu o komponenty. Ka\u017Cdy komponent powinien odpowiada\u0107 za jedn\u0105 konkretn\u0105 funkcjonalno\u015B\u0107 i by\u0107 zaprojektowany w spos\xF3b umo\u017Cliwiaj\u0105cy jego ponowne u\u017Cycie w innych projektach. W ten spos\xF3b otrzymujemy modu\u0142owe rozwi\u0105zanie naszego problemu, kt\xF3re mo\u017Cna \u0142atwo integrowa\u0107 z innymi elementami. Nast\u0119pnie takie komponenty mo\u017Cemy \u0142\u0105czy\u0107, tworz\u0105c bardziej z\u0142o\u017Cone struktury i kompletne projekty.</p><p><strong>Wyr\xF3\u017Cniamy trzy podstawowe komponenty: <code>Session</code>, <code>Board</code> i <code>Controller</code>.</strong></p><ul><li><p><strong>Session</strong>: g\u0142\xF3wny komponent, od kt\xF3rego zaczynamy projekt. Pe\u0142ni rol\u0119 korzenia w strukturze projektu i zarz\u0105dza graczami. To do niego do\u0142\u0105czamy pozosta\u0142e komponenty.</p></li><li><p><strong>Board</strong>: odpowiada za za\u0142adowanie planszy gry oraz przechowuje okre\u015Blone lokacje na mapie, do kt\xF3rych mo\u017Cna \u0142atwo odwo\u0142a\u0107 si\u0119 w kodzie.</p></li><li><p><strong>Controller</strong>: s\u0142u\u017Cy do implementacji modularnych rozwi\u0105za\u0144. Umo\u017Cliwia kontrolowan\u0105 obs\u0142ug\u0119 zdarze\u0144 Bukkit, a tak\u017Ce zarz\u0105dzanie zadaniami i w\u0105tkami przypisanymi do danego komponentu.</p></li></ul>',4),i=[r];function d(p,s,c,m,l,z){return a(),e("div",null,i)}const w=o(t,[["render",d]]);export{y as __pageData,w as default};
