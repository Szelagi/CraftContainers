import{_ as a,c as n,o as s,d as o}from"./app.1feda514.js";const e="/SessionAPI/assets/task.2eeb0961.png",u=JSON.parse('{"title":"Zarz\u0105dzanie zadaniami i w\u0105tkami","description":"","frontmatter":{},"headers":[{"level":2,"title":"Uruchamianie zadania","slug":"uruchamianie-zadania","link":"#uruchamianie-zadania","children":[{"level":3,"title":"Przyk\u0142ad","slug":"przyk\u0142ad","link":"#przyk\u0142ad","children":[]}]},{"level":2,"title":"Przerywanie zadania","slug":"przerywanie-zadania","link":"#przerywanie-zadania","children":[{"level":3,"title":"Przyk\u0142ad:","slug":"przyk\u0142ad-1","link":"#przyk\u0142ad-1","children":[]}]},{"level":2,"title":"Typy zada\u0144","slug":"typy-zadan","link":"#typy-zadan","children":[]}],"relativePath":"pl/technical/tasks.md"}'),l={name:"pl/technical/tasks.md"},p=o('<h1 id="zarzadzanie-zadaniami-i-watkami" tabindex="-1">Zarz\u0105dzanie zadaniami i w\u0105tkami <a class="header-anchor" href="#zarzadzanie-zadaniami-i-watkami" aria-hidden="true">#</a></h1><p>Framework umo\u017Cliwia uruchamianie <strong>zada\u0144 Bukkit</strong> przypisanych do komponent\xF3w. Gdy komponent zostanie wy\u0142\u0105czony, wszystkie powi\u0105zane z nim zadania zostan\u0105 automatycznie anulowane.</p><p><img src="'+e+`" alt="zadania"></p><h2 id="uruchamianie-zadania" tabindex="-1">Uruchamianie zadania <a class="header-anchor" href="#uruchamianie-zadania" aria-hidden="true">#</a></h2><p>Zadania mo\u017Cna uruchamia\u0107 od momentu inicjalizacji komponentu, co jest okre\u015Blone przez zdarzenie <code>onComponentInit</code>.</p><h3 id="przyk\u0142ad" tabindex="-1">Przyk\u0142ad <a class="header-anchor" href="#przyk\u0142ad" aria-hidden="true">#</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onComponentInit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ComponentConstructor</span><span style="color:#A6ACCD;"> event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    super</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onComponentInit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Zadanie zostanie uruchomione natychmiast (0 delay)</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// i b\u0119dzie wykonywane cyklicznie co 1 sekund\u0119.</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">runTaskTimer</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// Kod wykonywanego zadania</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> Time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">zero</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> Time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">seconds</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Automatyczne zarz\u0105dzanie zadaniami</p><p>Framework monitoruje cykl \u017Cycia komponent\xF3w oraz aktywne zadania. Gdy komponent zostanie wy\u0142\u0105czony, wszystkie przypisane do niego zadania zostan\u0105 anulowane.</p></div><h2 id="przerywanie-zadania" tabindex="-1">Przerywanie zadania <a class="header-anchor" href="#przerywanie-zadania" aria-hidden="true">#</a></h2><p>Ka\u017Cda metoda uruchamiaj\u0105ca zadanie zwraca obiekt zadania, kt\xF3ry pozwala na jego anulowanie lub kontrolowanie.</p><h3 id="przyk\u0142ad-1" tabindex="-1">Przyk\u0142ad: <a class="header-anchor" href="#przyk\u0142ad-1" aria-hidden="true">#</a></h3><div class="language-java"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">@</span><span style="color:#C792EA;">Override</span></span>
<span class="line"><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">onComponentInit</span><span style="color:#89DDFF;">(</span><span style="color:#C792EA;">ComponentConstructor</span><span style="color:#A6ACCD;"> event</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    super</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onComponentInit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> myTask </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">runTaskTimer</span><span style="color:#89DDFF;">(()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">-&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;">// Kod wykonywanego zadania</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> Time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">zero</span><span style="color:#89DDFF;">(),</span><span style="color:#A6ACCD;"> Time</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">seconds</span><span style="color:#89DDFF;">(</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;">// Anulowanie zadania</span></span>
<span class="line"><span style="color:#A6ACCD;">    myTask</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cancel</span><span style="color:#89DDFF;">();</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="typy-zadan" tabindex="-1">Typy zada\u0144 <a class="header-anchor" href="#typy-zadan" aria-hidden="true">#</a></h2><p>Framework udost\u0119pnia kilka metod uruchamiania zada\u0144:</p><ul><li><p><strong><code>runTask(runnable)</code></strong> - uruchamia zadanie w g\u0142\xF3wnym w\u0105tku serwera.</p></li><li><p><strong><code>runTaskAsync(runnable)</code></strong> - uruchamia zadanie w osobnym w\u0105tku.</p></li><li><p><strong><code>runTaskLater(runnable, delay)</code></strong> - uruchamia zadanie w g\u0142\xF3wnym w\u0105tku po okre\u015Blonym czasie.</p></li><li><p><strong><code>runTaskLaterAsync(runnable, delay)</code></strong> - uruchamia zadanie w osobnym w\u0105tku po okre\u015Blonym czasie.</p></li><li><p><strong><code>runTaskTimer(runnable, delay, interval)</code></strong> - uruchamia zadanie w g\u0142\xF3wnym w\u0105tku po okre\u015Blonym czasie i powtarza je cyklicznie.</p></li><li><p><strong><code>runTaskTimerAsync(runnable, delay, interval)</code></strong> - uruchamia zadanie w osobnym w\u0105tku po okre\u015Blonym czasie i powtarza je cyklicznie.</p></li></ul><div class="warning custom-block"><p class="custom-block-title">Wa\u017Cne!</p><p>Podczas wy\u0142\u0105czania komponentu (<code>onComponentDestroy</code>), nie nale\u017Cy inicjalizowa\u0107 nowych zada\u0144.</p></div>`,16),r=[p];function t(i,c,y,d,z,D){return s(),n("div",null,r)}const A=a(l,[["render",t]]);export{u as __pageData,A as default};
